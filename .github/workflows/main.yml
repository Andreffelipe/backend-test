name: Golang CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable
        cache: true
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.0
    
    - name: Run golangci-lint
      run: golangci-lint run ./... --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
    
    - name: Build
      run: |
        mkdir -p bin
        GOOS=linux GOARCH=amd64 go build -v -o bin/app-linux-amd64 ./cmd/main
        GOOS=darwin GOARCH=amd64 go build -v -o bin/app-darwin-amd64 ./cmd/main
        GOOS=windows GOARCH=amd64 go build -v -o bin/app-windows-amd64.exe ./cmd/main
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/
        retention-days: 7

  tag:
    name: Tag
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: bin/
    
    - name: Get version from git
      id: get_version
      run: |
        # Use git describe para gerar uma versão semântica baseada nas tags
        VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        # Incrementar a versão patch
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
    
    - name: Create Tag
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git tag -a v${{ steps.get_version.outputs.version }} -m "Release v${{ steps.get_version.outputs.version }}"
        git push origin v${{ steps.get_version.outputs.version }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          bin/app-linux-amd64
          bin/app-darwin-amd64
          bin/app-windows-amd64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}